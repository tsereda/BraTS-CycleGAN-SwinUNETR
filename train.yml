apiVersion: batch/v1
kind: Job
metadata:
  name: brats-seg # Customize this name (e.g., brats-seg-training-run-1)

spec:
  template:
    spec:
      securityContext: # Security context for the main container
        runAsUser: 1000
        runAsGroup: 100
        fsGroup: 100
      containers:
      - name: brats-processing
        image: gitlab-registry.nrp-nautilus.io/prp/jupyter-stack/prp
        env:
        - name: REPO_PATH # Path to the repository in the container
          value: /opt/repo/BraTS-CycleGAN-SwinUNETR
        command: # Command to execute in the container
        - "bash"
        - "-c"
        args:
        - |
          # --- User and Environment Setup ---
          echo "Running as user: $(whoami), UID: $(id -u), GID: $(id -g)"

          # Configure conda environment directories - using .condarc for simplicity (consider CONDA_ENVS_DIRS env var for more Kubernetes-native config)
          echo "envs_dirs:
            - /conda-envs
          " > ~/.condarc

          +         # --- Git Repository Update ---
          echo "Updating Git repository..."
          cd ${REPO_PATH} # Navigate to the repository directory
          git pull origin main || { echo "Failed to update git repository"; exit 1; } # Pull changes from 'origin main'
          echo "Git repository updated."

          # # --- Mamba Environment Management ---
          # if [ -d "/conda-envs/BraTS" ]; then
          #   echo "Updating existing BraTS environment using mamba..."
          #   mamba env update -vvv -f ${REPO_PATH}/environment.yml || { echo "Failed to update environment"; exit 1; }
          # else
          #   echo "Creating new BraTS environment using mamba..."
          #   mamba env create -f ${REPO_PATH}/environment.yml -p /conda-envs/BraTS || { echo "Failed to create environment"; exit 1; }
          # fi

          # --- Activate Conda Environment and Run Script ---
          eval "$(conda shell.bash hook)" # Still using conda shell hook for environment setup

          conda activate /conda-envs/BraTS || { echo "Failed to activate environment"; exit 1; }

          python ${REPO_PATH}/segmentation/train.py # Run the training script

        volumeMounts: # Mount volumes into the container
        - name: git-repo
          mountPath: /opt/repo # Mount for the git repository code
        - name: brats-data-volume
          mountPath: /data      # Mount for the brats data
        - name: conda-environments1
          mountPath: /conda-envs # Mount for conda environments

        resources: # Resource requests and limits for the container
          limits:
            memory: 4915Mi
            cpu: "1.2"
            nvidia.com/gpu: "1"
          requests:
            memory: 4096Mi
            cpu: "1"
            nvidia.com/gpu: "1"

      initContainers: # Init containers run before the main container
      - name: volume-permissions # Init container to set volume permissions
        image: busybox
        command: ["sh", "-c", "mkdir -p /conda-envs && chown -R 1000:100 /conda-envs && chmod -R 755 /conda-envs && echo 'Permissions set for /conda-envs'"]
        volumeMounts:
        - name: conda-environments1
          mountPath: /conda-envs
        securityContext: # Security context for permission setting - needs root to chown/chmod
          runAsUser: 0
        resources: # Resources for the init container
          limits:
            memory: 307Mi
            cpu: 240m
          requests:
            memory: 256Mi
            cpu: 200m

      - name: init-git-repo # Init container to clone the git repository
        image: alpine/git
        args:
        - clone
        - --single-branch
        - https://gitlab.nrp-nautilus.io/timothy.sereda/BraTS-CycleGAN-SwinUNETR # Update this URL to your repository
        - /opt/repo/BraTS-CycleGAN-SwinUNETR # Corrected clone target path to match REPO_PATH!
        volumeMounts:
        - name: git-repo
          mountPath: /opt/repo # Mount for the git repository
        resources: # Resources for the init container
          limits:
            memory: 307Mi
            cpu: 240m
          requests:
            memory: 256Mi
            cpu: 200m

      volumes: # Define volumes used by the job
      - name: git-repo # Volume for storing the git repository - using emptyDir for job-specific repo
        emptyDir: {}
      - name: brats-data-volume # Volume for brats data - PersistentVolumeClaim for persistent data
        persistentVolumeClaim:
          claimName: brats-data
      - name: conda-environments1 # Volume for conda environments - PersistentVolumeClaim for persistent environments
        persistentVolumeClaim:
          claimName: conda-environments1

      restartPolicy: Never # Job should not restart containers on failure

  backoffLimit: 1 # Number of retries before considering the job failed